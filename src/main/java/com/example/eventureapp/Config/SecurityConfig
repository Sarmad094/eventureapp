/*

package com.example.eventureapp.Config;

import org.springframework.context.annotation.Bean;

import org.springframework.context.annotation.Configuration;

import org.springframework.http.HttpMethod;

import org.springframework.security.config.annotation.web.builders.HttpSecurity;

import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

import org.springframework.security.web.SecurityFilterChain;

import org.springframework.web.cors.CorsConfiguration;

import org.springframework.web.cors.CorsConfigurationSource;

import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration

@EnableWebSecurity

public class SecurityConfig {

    private final SessionAuthenticationFilter sessionAuthenticationFilter;

    public SecurityConfig(SessionAuthenticationFilter sessionAuthenticationFilter) {

        this.sessionAuthenticationFilter = sessionAuthenticationFilter;

    }

    @Bean

    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

        http

                .cors(cors -> cors.configurationSource(corsConfigurationSource()))

                .csrf(csrf -> csrf.disable())

                .sessionManagement(session -> session

                        .maximumSessions(1)

                        .maxSessionsPreventsLogin(false)

                )

                .authorizeHttpRequests(authorize -> authorize

                        // Login/registration - open

                        .requestMatchers(HttpMethod.POST, "/api/students").permitAll()

                        .requestMatchers(HttpMethod.POST, "/api/students/login").permitAll()

                        .requestMatchers(HttpMethod.POST, "/api/organizations/register").permitAll()

                        .requestMatchers(HttpMethod.POST, "/api/organizations/login").permitAll()

                        // All GET requests - open (data is visible)

                        .requestMatchers(HttpMethod.GET, "/**").permitAll()

                        // STUDENT SECURITY - works âœ…

                        .requestMatchers(HttpMethod.POST, "/api/events/*/like").hasAuthority("ROLE_STUDENT")

                        .requestMatchers(HttpMethod.POST, "/api/events/*/book").hasAuthority("ROLE_STUDENT")

                        // ORGANIZATION SECURITY - temporarily disabled

                        // .requestMatchers(HttpMethod.POST, "/api/events").hasAuthority("ROLE_ORGANIZATION")

                        // .requestMatchers(HttpMethod.PUT, "/api/events/*").hasAuthority("ROLE_ORGANIZATION")

                        // .requestMatchers(HttpMethod.DELETE, "/api/events/*").hasAuthority("ROLE_ORGANIZATION")

                        .requestMatchers(HttpMethod.POST, "/api/events").permitAll()

                        .requestMatchers(HttpMethod.PUT, "/api/events/*").permitAll()

                        .requestMatchers(HttpMethod.DELETE, "/api/events/*").permitAll()

                        // Everything else open

                        .anyRequest().permitAll()

                )

                .formLogin(form -> form.disable())

                .httpBasic(basic -> basic.disable())

                .addFilterBefore(sessionAuthenticationFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class);

        return http.build();

    }

    @Bean

    public CorsConfigurationSource corsConfigurationSource() {

        CorsConfiguration configuration = new CorsConfiguration();

        configuration.setAllowedOriginPatterns(Arrays.asList("*"));

        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));

        configuration.setAllowedHeaders(Arrays.asList("*"));

        configuration.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();

        source.registerCorsConfiguration("/**", configuration);

        return source;

    }

}

*/
