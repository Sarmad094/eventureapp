/*
package com.example.eventureapp.Config;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.util.Collections;

@Component
public class SessionAuthenticationFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        HttpSession session = request.getSession(false);

        if (session != null) {
            String userRole = (String) session.getAttribute("USER_ROLE");
            String userId = (String) session.getAttribute("USER_ID");

            // DEBUG
            System.out.println("DEBUG FILTER: Session ID: " + session.getId());
            System.out.println("DEBUG FILTER: Role from session: " + userRole);
            System.out.println("DEBUG FILTER: UserID from session: " + userId);
            System.out.println("DEBUG FILTER: Request URL: " + request.getRequestURL());

            if (userRole != null && userId != null) {

                if (!userRole.startsWith("ROLE_")) {
                    userRole = "ROLE_" + userRole;
                }

                UsernamePasswordAuthenticationToken authentication =
                        new UsernamePasswordAuthenticationToken(
                                userId,
                                null,
                                Collections.singletonList(new SimpleGrantedAuthority(userRole))
                        );

                SecurityContextHolder.getContext().setAuthentication(authentication);
                System.out.println("DEBUG FILTER: Authentication SUCCESS with role: " + userRole);
            } else {
                System.out.println("DEBUG FILTER: No role/userId found in session");
            }
//        } else {
//            System.out.println("DEBUG FILTER: No session found");
       }

        filterChain.doFilter(request, response);
    }
}
*/